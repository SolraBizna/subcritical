--[[
  This source file is part of the SubCritical distribution.
  Copyright (C) 2008-2009 Solra Bizna.

  SubCritical is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 2 of the
  License, or (at your option) any later version.

  SubCritical is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of both the GNU General Public
  License and the GNU Lesser General Public License along with
  SubCritical.  If not, see <http://www.gnu.org/licenses/>.

  Please see doc/license.html for clarifications.
]]

garbage = {}
local manage_count = 0

local debugging = not not os.getenv("GARBAGE_DEBUG")
local dprintf
if(debugging) then
   function dprintf(format, ...)
      print("GARBG:"..format:format(...))
   end
else
   function dprintf() end
end

function garbage.Manage()
   if(manage_count == 0) then
      dprintf("Manage(): Automatic garbage collection paused")
      collectgarbage("stop")
   end
   manage_count = manage_count + 1
   dprintf("Manage(): New manage count is %i", manage_count)
end

function garbage.Release()
   assert(manage_count > 0, "garbage.Release() called without a matching garbage.Manage()!")
   manage_count = manage_count - 1
   dprintf("Release(): New manage count is %i", manage_count)
   if(manage_count == 0) then
      dprintf("Release(): Automatic garbage collection resumed")
      collectgarbage("restart")
   end
end

if(debugging) then
   function garbage.Collect()
      if(manage_count == 0) then
	 dprintf("Collect(): Not managing garbage, but asked to collect anyway")
      end
      local old = collectgarbage("count")
      collectgarbage("step")
      local new = collectgarbage("count")
      if(old > new) then
	 dprintf("Collect(): Collected %i bytes of (Lua-visible) garbage", (old - new) * 1024)
      else
	 dprintf("Collect(): CREATED %i bytes of garbage?!", (new - old) * 1024)
      end
   end
else
   function garbage.Collect()
      collectgarbage("step")
   end
end
